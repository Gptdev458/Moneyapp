import React, { useState } from 'react';
import { FlatList, StyleSheet, TouchableOpacity, View } from 'react-native';
import { Text } from 'react-native-paper';
import MaterialCommunityIcons from 'react-native-vector-icons/MaterialCommunityIcons';
import { IAccount } from '../../models/account';

interface AccountPickerProps {
  accounts: IAccount[];
  selectedAccountId: string | null;
  onSelectAccount: (accountId: string) => void;
  onDismiss: () => void;
  visible: boolean;
  onProceedToCategory?: () => void;
}

const AccountPicker: React.FC<AccountPickerProps> = ({
  accounts,
  selectedAccountId,
  onSelectAccount,
  onDismiss,
  visible,
  onProceedToCategory
}) => {
  const [selectedAccountForHighlight, setSelectedAccountForHighlight] = useState<string | null>(null);
  const [isGridView, setIsGridView] = useState(false);
  
  // Filter out archived accounts
  const filteredAccounts = accounts.filter(account => !account.isArchived);

  // List view item renderer
  const renderListItem = ({ item }: { item: IAccount }) => {
    const isSelected = item.id === selectedAccountForHighlight;

    return (
      <TouchableOpacity
        style={[
          styles.accountItem,
          { borderBottomColor: '#3d4049' },
          isSelected && { backgroundColor: '#ef4444' }
        ]}
        onPress={() => {
          setSelectedAccountForHighlight(item.id);
          onSelectAccount(item.id);
          if (onProceedToCategory) {
            onProceedToCategory();
          } else {
            onDismiss();
          }
        }}
      >
        <Text style={styles.accountName}>{item.name}</Text>
        <Text style={styles.accountBalance}>€{item.initialBalance.toFixed(2)}</Text>
      </TouchableOpacity>
    );
  };

  // Grid view item renderer
  const renderGridItem = ({ item, index }: { item: IAccount, index: number }) => {
    const isSelected = item.id === selectedAccountForHighlight;
    const needsBorderRight = (index + 1) % 3 !== 0;
    const needsBorderTop = index >= 3;
    
    return (
      <TouchableOpacity
        style={[
          styles.gridItem,
          {
            borderRightWidth: needsBorderRight ? 1 : 0,
            borderRightColor: '#3d4049',
            borderTopWidth: needsBorderTop ? 1 : 0,
            borderTopColor: '#3d4049',
          },
          isSelected && { backgroundColor: '#383b44' }
        ]}
        onPress={() => {
          setSelectedAccountForHighlight(item.id);
          onSelectAccount(item.id);
          if (onProceedToCategory) {
            onProceedToCategory();
          } else {
            onDismiss();
          }
        }}
      >
        <Text style={styles.gridItemName}>{item.name}</Text>
        <Text style={styles.gridItemBalance}>€{item.initialBalance.toFixed(2)}</Text>
      </TouchableOpacity>
    );
  };

  if (!visible) return null;

  return (
    <View style={styles.container} pointerEvents="box-only">
      {/* Bottom Panel */}
      <View style={[styles.panel, { backgroundColor: '#282c34' }]}>
        {/* Header */}
        <View style={[styles.header, { borderBottomColor: '#3d4049', borderBottomWidth: 1 }]}>
          <Text style={styles.title}>Accounts</Text>
          <View style={styles.headerActions}>
            <TouchableOpacity 
              style={styles.headerButton}
              onPress={() => setIsGridView(!isGridView)}
            >
              <MaterialCommunityIcons 
                name={isGridView ? "view-list" : "view-grid"} 
                size={24} 
                color="#FFFFFF" 
              />
            </TouchableOpacity>
            <TouchableOpacity style={styles.headerButton}>
              <MaterialCommunityIcons name="pencil" size={24} color="#FFFFFF" />
            </TouchableOpacity>
            <TouchableOpacity style={styles.headerButton} onPress={onDismiss}>
              <MaterialCommunityIcons name="close" size={24} color="#FFFFFF" />
            </TouchableOpacity>
          </View>
        </View>

        {/* Content */}
        {isGridView ? (
          <View style={styles.content}>
            <FlatList
              data={filteredAccounts}
              renderItem={renderGridItem}
              keyExtractor={item => item.id}
              numColumns={3}
            />
          </View>
        ) : (
          <View style={styles.content}>
            <FlatList
              data={filteredAccounts}
              renderItem={renderListItem}
              keyExtractor={item => item.id}
            />
          </View>
        )}
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    height: '50%', // Take only half the screen
    zIndex: 1000,
    backgroundColor: 'transparent', // Ensure container background is transparent
  },
  panel: {
    flex: 1, // Make panel fill container
    borderTopLeftRadius: 12,
    borderTopRightRadius: 12,
    overflow: 'hidden',
  },
  header: {
    height: 56,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 16,
  },
  title: {
    fontSize: 18,
    fontWeight: '600',
    color: '#FFFFFF',
  },
  headerActions: {
    flexDirection: 'row',
    gap: 16,
  },
  headerButton: {
    padding: 8,
    flexDirection: 'row',
    alignItems: 'center',
  },
  content: {
    flex: 1, // Make content fill remaining space
  },
  accountItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingVertical: 16,
    paddingHorizontal: 16,
    borderBottomWidth: 1,
  },
  accountName: {
    fontSize: 16,
    color: '#FFFFFF',
  },
  accountBalance: {
    fontSize: 16,
    color: '#9ca3af',
  },
  // Grid view styles
  gridItem: {
    width: '33.33%',
    padding: 16,
    justifyContent: 'center',
    alignItems: 'center',
  },
  gridItemName: {
    fontSize: 14,
    fontWeight: '500',
    color: '#FFFFFF',
    textAlign: 'center',
    marginBottom: 4,
  },
  gridItemBalance: {
    fontSize: 12,
    color: '#9ca3af',
    textAlign: 'center',
  },
});

export default AccountPicker; 