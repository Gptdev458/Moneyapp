# AI Agent Development Plan: Personal Money Manager v1 - To-Do List

**Goal:** To build the mobile budgeting app as described, using local JSON storage.

---

## Phase 0: Project Setup & Foundation

- [ ] **1. [SETUP] Create a new React Native project.**
    - [ ] Action: Run `npx react-native init PersonalMoneyManager --template react-native-template-typescript` (if using TypeScript) or `npx react-native init PersonalMoneyManager`.
    - [ ] Action: Navigate into the project directory: `cd PersonalMoneyManager`.

- [ ] **2. [SETUP] Install necessary libraries.**
    - [ ] Action: Install `uuid` for generating unique IDs: `npm install uuid && npm install @types/uuid --save-dev` (if TypeScript).
    - [ ] Action: Install `AsyncStorage`: `npm install @react-native-async-storage/async-storage`.
    - [ ] Action: Install React Navigation:
        - [ ] `npm install @react-navigation/native @react-navigation/bottom-tabs @react-navigation/native-stack`
        - [ ] `npm install react-native-screens react-native-safe-area-context`
        - [ ] (For iOS, ensure CocoaPods are installed: `cd ios && pod install && cd ..`)

- [x] **3. [SETUP] Basic Project Structure.**
    - [x] Action: Create a `src` folder in the project root.
    - [x] Action: Inside `src`, create the following folders:
        - [x] `screens`
        - [x] `components`
        - [x] `navigation`
        - [x] `services`
        - [x] `models` (for TypeScript interfaces/types)
        - [x] `theme`
        - [x] `utils`

- [x] **4. [THEME] Define Basic Theme Colors.**
    - [x] Action: Create `src/theme/colors.js` (or `.ts`).
    - [x] Action: Define basic dark theme colors (e.g., background, surface, primary, text, income, expense).

- [x] **5. [MODELS] Define TypeScript Interfaces (if using TypeScript).**
    - [x] Action: Create `src/models/settings.ts` and define `ISettings` interface.
    - [x] Action: Create `src/models/account.ts` and define `IAccount` interface.
    - [x] Action: Create `src/models/category.ts` and define `ICategory` interface.
    - [x] Action: Create `src/models/transaction.ts` and define `ITransaction` interface.
    - [x] Action: Create `src/models/budget.ts` and define `IBudget` interface.
    - [x] Action: Create `src/models/goal.ts` and define `IGoal` interface.
    - [x] Action: Create `src/models/appData.ts` and define `IAppData` interface (for composite object approach, if chosen).

---

## Phase 1: Data Storage Service (`storageService.js` or `.ts`)

- [x] **1. [STORAGE] Create `src/services/storageService.ts`.**
- [x] **2. [STORAGE] Import `AsyncStorage` and `uuid`.**
- [x] **3. [STORAGE] Implement `generateId()` utility.**
    - [x] Action: Create `src/utils/idGenerator.ts`.
    - [x] Action: Implement `export const generateId = (): string => uuid.v4();`.
    - [x] Action: Import `generateId` into `storageService.ts`.

- [x] **4. [STORAGE] Implement generic `saveData(key, data)` function.**
- [x] **5. [STORAGE] Implement generic `loadData(key)` function.**

- [ ] **6. [STORAGE] Implement `initializeDefaultData()` function.**
    - [ ] Action: Define default `settings` object (`DEFAULT_SETTINGS`).
    - [ ] Action: Define default `accounts` array (`DEFAULT_ACCOUNTS`).
    - [ ] Action: Define default `categories` array (`DEFAULT_CATEGORIES`).
    - [ ] Action: Define empty arrays for `transactions`, `budgets`, `goals`.
    - [ ] Action: Implement `initializeAppData` to save these defaults if their respective keys are not found in `AsyncStorage`.

- [ ] **7. [STORAGE] Implement specific getters/setters for each data type.**
    - [ ] **Settings:**
        - [ ] Action: Implement `getSettings()`.
        - [ ] Action: Implement `saveSettings()`.
    - [ ] **Accounts:**
        - [ ] Action: Implement `getAccounts()`.
        - [ ] Action: Implement `saveAccounts()`.
        - [ ] Action: Implement `addAccount()`.
        - [ ] Action: Implement `updateAccount()`.
        - [ ] Action: Implement `deleteAccount()` (with TODO for handling associated transactions).
    - [ ] **Categories:**
        - [ ] Action: Implement `getCategories()`.
        - [ ] Action: Implement `saveCategories()`.
        - [ ] Action: Implement `addCategory()`.
        - [ ] Action: Implement `updateCategory()`.
    - [ ] **Transactions:**
        - [ ] Action: Implement `getTransactions()`.
        - [ ] Action: Implement `saveTransactions()`.
        - [ ] Action: Implement `addTransaction()` (with TODO for updating account balances).
        - [ ] Action: Implement `updateTransaction()` (with TODO for recalculating balances).
        - [ ] Action: Implement `deleteTransaction()` (with TODO for recalculating balances).
    - [ ] **Budgets:**
        - [ ] Action: Implement `getBudgets()`.
        - [ ] Action: Implement `saveBudgets()`.
        - [ ] Action: Implement `addBudget()`.

- [ ] **8. [STORAGE] Implement `updateAccountBalanceOnTransaction` utility.**
    - [ ] Action: Create `src/services/balanceService.ts`.
    - [ ] Action: Import necessary types and functions.
    - [ ] Action: Implement `export const updateBalancesForTransaction = async (transaction: ITransaction, oldTransaction?: ITransaction) => { ... }`.
        - [ ] Handle 'expense', 'income', 'transfer' for new transactions.
        - [ ] Handle updates (revert old, apply new).
        - [ ] Handle deletes (revert old).
        - [ ] Save updated accounts array.
    - [ ] Action: Modify `addTransaction`, `updateTransaction`, `deleteTransaction` in `storageService.ts` to call `updateBalancesForTransaction`.

- [ ] **9. [APP] Initialize data on app startup.**
    - [ ] Action: In `App.tsx` (or `App.js`), add a `useEffect` hook to call `initializeAppData`.
    - [ ] Action: Implement a loading state in `App.tsx` while data initializes.

---

## Phase 2: Navigation Setup

- [ ] **1. [NAVIGATION] Create `src/navigation/AppNavigator.tsx`.**
    - [ ] Action: Import `createBottomTabNavigator` and `createNativeStackNavigator`.
    - [ ] Action: Import placeholder screen components.
    - [ ] Action: Define `AccountsNavigator` (stack for AccountsList & AccountDetail).
    - [ ] Action: Define `MainTabs` (bottom tab navigator for Trans, Stats, AccountsNav, More).
    - [ ] Action: Define `RootStack` (for modals like AddTransaction over MainTabs).
    - [ ] Action: Configure tab bar styles (active/inactive color, background).
    - [ ] Action: (Optional) Add tab bar icons.
    - [ ] Action: Create placeholder files for `TransactionsScreen.tsx`, `StatsScreen.tsx`, `AccountsListScreen.tsx`, `AccountDetailScreen.tsx`, `MoreScreen.tsx`, `AddTransactionScreen.tsx` in `src/screens/` with basic themed content.

---

## Phase 3: Screen Implementation (Iterative)

### 3.1. Screen: Transactions (Main/Home Screen) (`src/screens/TransactionsScreen.tsx`)

- [ ] **1. [UI] Create `src/components/ScreenHeader.tsx` (reusable).**
- [ ] **2. [UI] Layout Header:** Month/Year navigation, Star, Search, More Options icons.
    - [ ] Action: Implement state for `currentMonth`.
    - [ ] Action: Implement `goToPreviousMonth`, `goToNextMonth` functions.
    - [ ] Action: Implement basic `MonthYearPickerModal` component.
- [ ] **3. [UI] Layout View Switching Tabs:** "Daily", "Calendar", "Monthly", "Total", "Note".
    - [ ] Action: Implement state for `activeViewTab`.
    - [ ] Action: Create tappable elements for tabs, highlight active.
- [ ] **4. [UI] Layout Financial Summary Bar:** "Income", "Expenses", "Total".
- [ ] **5. [UI] Layout Content Area (Conditional based on `activeViewTab`).**
- [ ] **6. [UI] "Daily" View:**
    - [ ] Action: Create `src/components/TransactionListItem.tsx`.
    - [ ] Action: Create `src/components/DateGroupHeader.tsx`.
    - [ ] Action: Use `SectionList` or nested `FlatList`s for transactions grouped by date.
    - [ ] Action: Placeholder for expand/collapse functionality.
    - [ ] Action: Placeholder `View` for "Budget Display Area".
- [ ] **7. [UI] "Calendar" View:**
    - [ ] Action: Create `src/components/CalendarDayCell.tsx`.
    - [ ] Action: Layout a month grid. Highlight current day.
- [ ] **8. [UI] "Monthly", "Total", "Note" Views:**
    - [ ] Action: "Monthly": `FlatList` with `TransactionListItem`.
    - [ ] Action: "Total": Display summary text.
    - [ ] Action: "Note": Filter transactions with notes, display in `FlatList`.
- [ ] **9. [UI] Layout Floating Action Buttons (FABs):**
    - [ ] Action: Create `src/components/FabButton.tsx`.
    - [ ] Action: Add primary "+" FAB and secondary list/calculator FAB.
- [ ] **10. [DATA] Fetch Data:** `settings`, `transactions`, `categories`, `accounts`, `budgets`. Use `useEffect` and `useState`.
- [ ] **11. [DATA] Add `useIsFocused` hook to refetch data when screen comes into focus.**
- [ ] **12. [LOGIC] Date Navigation Logic:** Update display, handle `MonthYearPickerModal`.
- [ ] **13. [LOGIC] Filter Transactions:** Based on `currentMonth` and `activeViewTab`.
- [ ] **14. [LOGIC] Calculate Summaries:** For Financial Summary Bar, "Daily" view, "Calendar" view.
- [ ] **15. [LOGIC] Populate Views:** Pass data to respective view components.
- [ ] **16. [INTERACTION] Tab Switching:** Update `activeViewTab`, re-render.
- [ ] **17. [INTERACTION] "+" FAB:** Navigate to "AddTransaction".
- [ ] **18. [INTERACTION] Secondary FAB:** Placeholder or navigate to "AddTransaction".
- [ ] **19. [INTERACTION] Header Icons (Star, Search, More Options):** Placeholder `onPress` handlers.

### 3.2. Screen: Add Transaction (`src/screens/AddTransactionScreen.tsx`)

- [ ] **1. [UI] Layout Header:** Back arrow, dynamic title, Star icon.
- [ ] **2. [UI] Layout Transaction Type Tabs:** "Income", "Expense", "Transfer".
    - [ ] Action: State for `transactionType`, highlight active.
- [ ] **3. [UI] Layout Form Fields:**
    - [ ] Date: `TouchableOpacity` for Date/Time Picker, "Rep/Inst." icon (placeholder).
    - [ ] Account: `TouchableOpacity` for Account Panel. (Handle "From/To" for Transfer).
    - [ ] Category: `TouchableOpacity` for Category Panel. (Hide for Transfer).
    - [ ] Amount: `TextInput` (numeric).
    - [ ] Note: `TextInput`.
    - [ ] (Optional) Picture: Placeholder.
- [ ] **4. [UI] Layout Dynamic Selection Panel (Account/Category):**
    - [ ] Action: States `isAccountPanelVisible`, `isCategoryPanelVisible`.
    - [ ] Account Panel: Header, manage icons (placeholders), Close (X) button, grid of account buttons.
    - [ ] Category Panel: Header, manage icons (placeholders), Close (X) button, grid/list of category buttons.
- [ ] **5. [STATE] Form Data State:** `selectedDate`, `selectedAccountId`, `selectedToAccountId`, `selectedCategoryId`, `amountStr`, `note`.
- [ ] **6. [DATA] Fetch Data:** `accounts` and `categories` for selection panels.
- [ ] **7. [LOGIC] Type Selection:** Update `transactionType`, clear relevant fields.
- [ ] **8. [LOGIC] Date Picker:** Use `DateTimePickerModal` or similar. Update `selectedDate`.
- [ ] **9. [LOGIC] Account/Category Panel Interaction:**
    - [ ] Show/hide panels on field tap.
    - [ ] Update selected IDs, auto-focus next field.
    - [ ] Filter categories by `transactionType`.
    - [ ] Close button functionality.
- [ ] **10. [LOGIC] Amount Input:** Update `amountStr`, handle numeric input.
- [ ] **11. [INTERACTION] Save Transaction:**
    - [ ] Validate inputs.
    - [ ] Construct `ITransaction` object.
    - [ ] Call `storageService.addTransaction()`.
    - [ ] Close modal: `navigation.goBack()`.
- [ ] **12. [INTERACTION] Cancel:** `navigation.goBack()`.
- [ ] **13. [INTERACTION] Star Icon (Template):** Placeholder.
- [ ] **14. [LOGIC] Handle `preselectedAccountId` route param if navigating from Account Detail.**

### 3.3. Screen: Stats (`src/screens/StatsScreen.tsx`)

- [ ] **1. [UI] Layout Header:** Period navigation, Period type selector (Weekly, Monthly, Yearly, Custom).
- [ ] **2. [UI] Layout Income/Expense Toggle:** Tabs/buttons for "Income [Amount]" and "Expenses [Amount]".
- [ ] **3. [UI] Main Statistics Display:**
    - [ ] Pie Chart: Placeholder `View`. (Later, integrate library).
    - [ ] Category List: `FlatList` with `CategoryStatItem`.
        - [ ] Action: Create `src/components/CategoryStatItem.tsx`.
- [ ] **4. [STATE] Data State:** `selectedPeriodType`, `currentPeriodDate`, `activeStatType`.
- [ ] **5. [DATA] Fetch Data:** `transactions`, `categories`.
- [ ] **6. [LOGIC] Period Navigation & Selection:** Update state.
- [ ] **7. [LOGIC] Income/Expense Toggle:** Update `activeStatType`.
- [ ] **8. [LOGIC] Data Aggregation:**
    - [ ] Filter transactions by period, type.
    - [ ] Group by `categoryId`, sum amounts, calculate percentages.
    - [ ] Calculate total income/expense for toggle display.
- [ ] **9. [DISPLAY] Populate Pie Chart & List.**
- [ ] **10. [INTERACTION] Category Tap:** Navigate to "Category Detail View" (conditional render or nested stack).
    - [ ] Action: State for `selectedCategoryForDetail: ICategory | null`.
- [ ] **11. [UI] Category Detail View (Conditional Render):**
    - [ ] Header: Back arrow, Category Name, Period Nav.
    - [ ] Total Amount Display.
    - [ ] Historical Trend Graph (Line Graph): Placeholder `